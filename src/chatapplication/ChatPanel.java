/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package chatapplication;

import com.mysql.cj.jdbc.StatementImpl;
import java.awt.Image;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ChatPanel extends javax.swing.JPanel {
    // Messages in jList
    DefaultListModel listModel1 = new DefaultListModel();
    DefaultListModel listModel2 = new DefaultListModel();
    
    // List stores database index
    List<Integer> ownMessages = new ArrayList<>();
    List<Integer> otherMessages = new ArrayList<>();
    
    private int senderId = -1;
    private int receiverId = -1;
    
    /**
     * Creates new form ChatPanel
     */
    public ChatPanel() {
        initComponents();
        repaint();
        revalidate();
        
        listMyMessages.setModel(listModel1);
        listOtherMessages.setModel(listModel2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMessageField = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMyMessages = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOtherMessages = new javax.swing.JList<>();
        btnSettings = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        btnDeleteMessage = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblMe = new javax.swing.JLabel();
        lblFriend = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        txtMessageField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtMessageField.setText("Hello");

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        listMyMessages.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listMyMessages);

        listOtherMessages.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listOtherMessages);

        btnSettings.setText("Settings");
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setRollover(true);

        btnDeleteMessage.setBackground(new java.awt.Color(255, 255, 255));
        btnDeleteMessage.setText("Delete");
        btnDeleteMessage.setFocusable(false);
        btnDeleteMessage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteMessage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMessageActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteMessage);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblMe.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMe.setText("User");

        lblFriend.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblFriend.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFriend.setText("User 2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtMessageField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSettings))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFriend)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSettings)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMe)
                    .addComponent(lblFriend))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMessageField)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed
        Main frm = (Main) Main.getInstance();
        frm.setActivePanel(frm.settingsPanel);
    }//GEN-LAST:event_btnSettingsActionPerformed

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        JComponent component = (JComponent)evt.getComponent();
        if (component.isShowing()) {
            update();
        }
    }//GEN-LAST:event_formHierarchyChanged

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        send(txtMessageField.getText());
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnDeleteMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMessageActionPerformed
        if (!listMyMessages.isSelectionEmpty())
        {
            delete(listMyMessages.getSelectedIndex());
        }
    }//GEN-LAST:event_btnDeleteMessageActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Main frm = (Main) Main.getInstance();
        frm.setActivePanel(frm.previousPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    ImageIcon getAsIcon(String location) {
        ImageIcon imageIcon = new ImageIcon(location);
        Image image = imageIcon.getImage();
        Image newImage = image.getScaledInstance(50, 70, Image.SCALE_SMOOTH);
        return new ImageIcon(newImage);
    }
    
    private String getName(StatementImpl stmt, int userId) throws SQLException {
        ResultSet resultSet = stmt.executeQuery("SELECT user_name FROM chat_user WHERE user_id=" + userId);
        resultSet.next();
        return resultSet.getString("user_name");
    }
    
    private void update() {
        try {
            Main main = (Main) Main.getInstance();
            
            // clear the message list
            ownMessages.clear();
            otherMessages.clear();
            
            listModel1.clear();
            listModel2.clear();
            listMyMessages.setModel(listModel1);
            listOtherMessages.setModel(listModel2);
            
            // TODO: get data from database and add those into messages array
            // Query: SELECT * FROM chat_message WHERE sender = myUserId AND receiver = receiverId
            Connection db = Main.dbConnection;
            StatementImpl stmt = (StatementImpl) db.createStatement();
            
            senderId = main.myUserId;
            receiverId = main.receiverId;

            lblMe.setText(getName(stmt, senderId));
            lblFriend.setText(getName(stmt, receiverId));
            
            ResultSet resultSet = stmt.executeQuery("SELECT * FROM chat_message WHERE sender = " + senderId + " OR sender = " + receiverId + "");
            while (resultSet.next()) {
                if (resultSet.getInt("sender") == senderId) {
                    ownMessages.add(resultSet.getInt("message_id"));
                    if (resultSet.getBoolean("is_text")) {
                        listModel1.addElement(resultSet.getString("message"));
                    }
                } else {
                    otherMessages.add(resultSet.getInt("message_id"));
                    if (resultSet.getBoolean("is_text")) {
                        listModel2.addElement(resultSet.getString("message"));
                    }
                }
            }
            
            System.out.println();
            for (int i = 0; i < ownMessages.size(); i++) {
                System.out.println(i + " " + ownMessages.get(i));
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void send(Object obj) {
        // TODO: insert into database
        // Query: INSERT INTO chat_message(sender, receiver, message, is_text) VALUES (myUserId, receiverId, message, true)
        try {
            Main mainInstance = (Main) Main.getInstance();
            
            Connection db = Main.dbConnection;
            StatementImpl stmt = (StatementImpl) db.createStatement();
            
            String query = "";
            if (obj instanceof String && !((String)obj).isEmpty()) {
                query = "INSERT INTO chat_message (sender, receiver, message) VALUES (" + mainInstance.myUserId + ", " + mainInstance.receiverId + ", \"" + txtMessageField.getText() + "\")";
            }
            
            if (!query.isEmpty()) {
                int rSet = stmt.executeUpdate(query);
                if (rSet == 0) {
                    System.out.println("Message not added!");
                }
                update();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        txtMessageField.setText("");
    }
    
    private void delete(int messageId) {
        System.out.println("selected index: " + messageId);
        System.out.println("database index: " + ownMessages.get(messageId));
        
        if (!ownMessages.isEmpty()) {
            try {
                int dbIndex = ownMessages.get(messageId);
                ownMessages.remove(messageId);
                
                Connection conn = Main.dbConnection;
                StatementImpl stmt = (StatementImpl)conn.createStatement();
                
                String query = "SELECT * FROM chat_message WHERE message_id = " + dbIndex;
//                ResultSet rSet = stmt.executeQuery(query);
//                if (rSet.getInt("sender") == ((Main)Main.getInstance()).myUserId)
//                {
                    // TODO: delete message from database
                    // Query: DELETE FROM chat_message WHERE id = dbIndex
                    query = "DELETE FROM chat_message WHERE message_id = " + dbIndex;
                    stmt.executeUpdate(query);
//                }
                
                System.out.println("Deleting " + dbIndex + "...");
                
                update();
            } catch (SQLException ex) {
                Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteMessage;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSettings;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblFriend;
    private javax.swing.JLabel lblMe;
    private javax.swing.JList<String> listMyMessages;
    private javax.swing.JList<String> listOtherMessages;
    private javax.swing.JTextField txtMessageField;
    // End of variables declaration//GEN-END:variables
}
